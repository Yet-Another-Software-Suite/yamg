package frc.robot.subsystems;

import edu.wpi.first.epilogue.Logged;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.simulation.SingleJointedArmSim;
import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.math.system.plant.DCMotor;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj2.command.Command;
{{#if isSparkController}}
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.wpilibj.Notifier;
import java.util.function.DoubleSupplier;
{{/if}}

{{{motorControllerImports}}}

/**
* Pivot subsystem using {{motorControllerType}} with {{motorType}} motor
*/
@Logged(name = "{{ntKey}}")
public class {{subsystemName}} extends SubsystemBase {
// Constants
private final int canID = {{canId}};
private final double gearRatio = {{gearRatio}};
  private final double kP = {{pidValues.kP}};
  private final double kI = {{pidValues.kI}};
  private final double kD = {{pidValues.kD}};
private final double maxVelocity = {{maxVelocity}}; // rad/s
private final double maxAcceleration = {{maxAcceleration}}; // rad/s²
private final boolean brakeMode = {{brakeMode}};
 {{#if enableSoftLimits}}
 private final double forwardSoftLimit = {{forwardSoftLimit}}; // max angle in radians
 private final double reverseSoftLimit = {{reverseSoftLimit}}; // min angle in radians
 {{/if}}
 private final boolean enableStatorLimit = {{enableStatorLimit}};
 private final double statorCurrentLimit = {{statorCurrentLimit}};
 private final boolean enableSupplyLimit = {{enableSupplyLimit}};
 private final double supplyCurrentLimit = {{supplyCurrentLimit}};

// Feedforward
private final ArmFeedforward feedforward = new ArmFeedforward(
  {{kS}}, // kS
  0, // kG - Pivot doesn't need gravity compensation
  {{kV}}, // kV
  {{kA}}  // kA
);

// Motor controller
{{{motorControllerDeclaration}}}

{{#if isSparkController}}
// Control mode
private enum ControlMode {
  OPEN_LOOP,
  POSITION,
  VELOCITY
}
private ControlMode currentControlMode = ControlMode.OPEN_LOOP;
private double targetPosition = 0.0;
private double targetVelocity = 0.0;

// Profiled PID Controller
private ProfiledPIDController profiledPIDController;
private TrapezoidProfile.Constraints constraints;
private Notifier controlLoop;
private final double CONTROL_LOOP_FREQUENCY = 100.0; // Hz
{{/if}}

// Simulation
private final SingleJointedArmSim armSim;

/**
 * Creates a new Pivot Subsystem.
 */
public {{subsystemName}}() {
  // Initialize motor controller
  {{{motorControllerInitialization}}}

  
  // Initialize simulation
  armSim = new SingleJointedArmSim(
    {{{dcMotorType}}}, // Motor type
    gearRatio,
    0.01, // Arm moment of inertia - Small value since there are no arm parameters
    0.1, // Arm length (m) - Small value since there are no arm parameters
    Units.degreesToRadians(-90), // Min angle (rad)
    Units.degreesToRadians(90), // Max angle (rad)
    false, // Simulate gravity - Disable gravity for pivot
    Units.degreesToRadians(0) // Starting position (rad)
  );
  
  {{#if isSparkController}}
  // Initialize ProfiledPIDController
  // Convert from radians to rotations for constraints
  double maxVelocityRotations = maxVelocity / (2.0 * Math.PI);
  double maxAccelerationRotations = maxAcceleration / (2.0 * Math.PI);
  
  constraints = new TrapezoidProfile.Constraints(maxVelocityRotations, maxAccelerationRotations);
  profiledPIDController = new ProfiledPIDController(kP, kI, kD, constraints);
  
  // Start control loop on a separate thread using Notifier
  controlLoop = new Notifier(this::controlLoopFn);
  controlLoop.startPeriodic(1.0 / CONTROL_LOOP_FREQUENCY);
  {{/if}}
}

{{#if isSparkController}}
/**
 * Control loop function that runs at a fixed frequency.
 * This is used for SparkMAX and SparkFlex controllers to implement
 * closed-loop control outside of the main robot loop.
 */
private void controlLoopFn() {
  switch (currentControlMode) {
    case POSITION:
      double currentPos = getPosition();
      double output = profiledPIDController.calculate(currentPos, targetPosition);
      double velocity = profiledPIDController.getSetpoint().velocity;
      double feedforwardOutput = feedforward.calculate(0, velocity); // No gravity compensation for pivot
      setVoltage(output + feedforwardOutput);
      break;
      
    case VELOCITY:
      double currentVel = getVelocity();
      double velOutput = profiledPIDController.calculate(currentVel, targetVelocity);
      double accel = profiledPIDController.getSetpoint().velocity - currentVel;
      double velFeedforwardOutput = feedforward.calculate(0, targetVelocity, accel); // No gravity compensation
      
      // Apply the combined PID output and feedforward to the motor
      double velocityVoltage = velOutput + velFeedforwardOutput;
      motor.setVoltage(velocityVoltage);
      break;
      
    case OPEN_LOOP:
    default:
      // Do nothing, voltage is set directly
      break;
  }
}

/**
 * Clean up resources when the subsystem is destroyed.
 */
@Override
  public void close() {
     motor.close();
   }
}
{{/if}}

/**
 * Update simulation and telemetry.
 */
@Override
public void periodic() {
  {{{motorControllerPeriodic}}}
}

/**
 * Update simulation.
 */
@Override
public void simulationPeriodic() {
  // Set input voltage from motor controller to simulation
  armSim.setInput(getVoltage());
  
  // Update simulation by 20ms
  armSim.update(0.020);
}

/**
 * Get the current position in Rotations.
 * @return Position in Rotations
 */
  {{#if logPosition}}
  @Logged(name = "Position/Rotations")
  {{/if}}
public double getPosition() {
  // Rotations
  {{{getPositionMethod}}}
}

{{#if (or (eq positionUnit 'Degrees') (eq positionUnit 'Radians'))}}
/**
 * Get the current position in {{positionUnit}}.
 * @return Position in {{positionUnit}}.
 */
  {{#if logPosition}}
  @Logged(name = "Position/{{positionUnit}}")
  {{/if}}
public double getPosition{{positionUnit}}() {
  {{#if (eq positionUnit 'Degrees')}}
  return getPosition() * 360;
  {{else}}
  return getPosition() * 2 * Math.PI;
  {{/if}}
}
{{/if}}


/**
 * Get the current velocity in rotations per second.
 * @return Velocity in rotations per second
 */
  {{#if logVelocity}}
  @Logged(name = "Velocity")
  {{/if}}
public double getVelocity() {
  {{{getVelocityMethod}}}

}

/**
 * Get the current applied voltage.
 * @return Applied voltage
 */
  {{#if logVoltage}}
  @Logged(name = "Voltage")
  {{/if}}
public double getVoltage() {
  {{{getVoltageMethod}}}
}

/**
 * Get the current motor current.
 * @return Motor current in amps
 */
  {{#if logCurrent}}
  @Logged(name = "Current")
  {{/if}}
public double getCurrent() {
  {{{getCurrentMethod}}}
}

/**
 * Get the current motor temperature.
 * @return Motor temperature in Celsius
 */
  {{#if logTemperature}}
  @Logged(name = "Temperature")
  {{/if}}
public double getTemperature() {
  {{{getTemperatureMethod}}}
}

/**
 * Set pivot angle.
 * @param angleDegrees The target angle in degrees
 */
public void setAngle(double angleDegrees) {
  setAngle(angleDegrees, 0);
}

/**
 * Set pivot angle with acceleration.
 * @param angleDegrees The target angle in degrees
 * @param acceleration The acceleration in rad/s²
 */
public void setAngle(double angleDegrees, double acceleration) {
  // Convert degrees to rotations
  double angleRadians = Units.degreesToRadians(angleDegrees);
  double positionRotations = angleRadians / (2.0 * Math.PI);
  
  {{#if isSparkController}}
  // Use the ProfiledPIDController
  targetPosition = positionRotations;
  currentControlMode = ControlMode.POSITION;
  
  // If acceleration is specified, update constraints
  if (acceleration > 0) {
    double maxAccelRotations = acceleration / (2.0 * Math.PI);
    constraints = new TrapezoidProfile.Constraints(constraints.maxVelocity, maxAccelRotations);
    profiledPIDController.setConstraints(constraints);
  }
  {{else}}
  {{{setPositionMethod}}}
  {{/if}}
}

/**
 * Set pivot angular velocity.
 * @param velocityDegPerSec The target velocity in degrees per second
 */
public void setVelocity(double velocityDegPerSec) {
  setVelocity(velocityDegPerSec, 0);
}

/**
 * Set pivot angular velocity with acceleration.
 * @param velocityDegPerSec The target velocity in degrees per second
 * @param acceleration The acceleration in degrees per second squared
 */
public void setVelocity(double velocityDegPerSec, double acceleration) {
  // Convert degrees/sec to rotations/sec
  double velocityRadPerSec = Units.degreesToRadians(velocityDegPerSec);
  double velocityRotations = velocityRadPerSec / (2.0 * Math.PI);
  
  {{#if isSparkController}}
  // Use the ProfiledPIDController
  targetVelocity = velocityRotations;
  currentControlMode = ControlMode.VELOCITY;
  
  // If acceleration is specified, update constraints
  if (acceleration > 0) {
    double maxAccelRotations = Units.degreesToRadians(acceleration) / (2.0 * Math.PI);
    constraints = new TrapezoidProfile.Constraints(constraints.maxVelocity, maxAccelRotations);
    profiledPIDController.setConstraints(constraints);
  }
  
  // Apply velocity directly to the motor controller as well
  // This ensures immediate response while the control loop refines it
  double ffVolts = feedforward.calculate(0, velocityRotations, 0); // No gravity compensation for pivot
  motor.setVoltage(ffVolts);
  {{else}}
  {{{setVelocityMethod}}}
  {{/if}}
}

/**
 * Set motor voltage directly.
 * @param voltage The voltage to apply
 */
public void setVoltage(double voltage) {
  {{#if isSparkController}}
  currentControlMode = ControlMode.OPEN_LOOP;
  {{/if}}
  {{{setVoltageMethod}}}
}

/**
 * Get the pivot simulation for testing.
 * @return The pivot simulation model
 */
public SingleJointedArmSim getSimulation() {
  return armSim;
}

/**
 * Creates a command to set the pivot to a specific angle.
 * @param angleDegrees The target angle in degrees
 * @return A command that sets the pivot to the specified angle
 */
public Command setAngleCommand(double angleDegrees) {
  return runOnce(() -> setAngle(angleDegrees));
}

/**
 * Creates a command to move the pivot to a specific angle with a profile.
 * @param angleDegrees The target angle in degrees
 * @return A command that moves the pivot to the specified angle
 */
public Command moveToAngleCommand(double angleDegrees) {
  return run(() -> {
    {{#if isSparkController}}
    // Just set the position and let the profiled controller handle it
    setAngle(angleDegrees);
    {{else}}
    double currentAngle = Units.radiansToDegrees(getPositionRadians());
    double error = angleDegrees - currentAngle;
    double velocityDegPerSec = Math.signum(error) * Math.min(Math.abs(error) * 2.0, Units.radiansToDegrees(maxVelocity));
    setVelocity(velocityDegPerSec);
    {{/if}}
  }).until(() -> {
    double currentAngle = Units.radiansToDegrees(getPositionRadians());
    return Math.abs(angleDegrees - currentAngle) < 2.0; // 2 degree tolerance
  }).finallyDo((interrupted) -> setVelocity(0));
}

/**
 * Creates a command to stop the pivot.
 * @return A command that stops the pivot
 */
public Command stopCommand() {
  return runOnce(() -> setVelocity(0));
}

/**
 * Creates a command to move the pivot at a specific velocity.
 * @param velocityDegPerSec The target velocity in degrees per second
 * @return A command that moves the pivot at the specified velocity
 */
public Command moveAtVelocityCommand(double velocityDegPerSec) {
  return run(() -> setVelocity(velocityDegPerSec));
}
}
